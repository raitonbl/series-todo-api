openapi: 3.0.3
info:
  title: Core Service API
  description: A simple API to manage tasks.
  version: 1.0.0
tags:
  - name: PUBLIC-API
  - name: PRIVATE-API
  - name: SYSTEM-API
servers:
  - url: "https://api.example.com"

components:
  securitySchemes:
    public:
      type: openIdConnect
      openIdConnectUrl: https://example.com/public/.well-known/openid-configuration
    private:
      type: openIdConnect
      openIdConnectUrl: https://example.com/private/.well-known/openid-configuration
  responses:
    Problem400:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Problem401:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            AccessTokenNotSupported:
              summary: Whenever the access token is missing or the access token isn't valid
              value:
                type: /problems/http/unauthorized
                title: Unauthorized
                status: 401
                detail: Request not authorized to perform operation
                instance: /problems/http/unauthorized
    Problem403:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            AccessTokenNotAuthorized:
              summary: Whenever the access token is not authorized to perform operation
              value:
                type: /problems/http/not-authorized
                title: Forbidden
                status: 403
                detail: Request not authorized to perform operation
                instance: /problems/http/not-authorized
    Problem404:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            ResourceNotFound:
              summary: Whenever the operation doesn't exist
              value:
                type: /problems/http/not-found
                title: NotFound
                status: 404
                detail: Specified operation doesn't exist
                instance: /problems/http/not-found
    Problem409:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Problem422:
      description: Unprocessable Entity
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Problem500:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            SomethingWentWrong:
              summary: Operation cannot be performed due to an error
              value:
                type: /problems/http/server-error
                title: Something went wrong
                status: 500
                detail: Specified operation cannot be performed due to an error
                instance: /problems/http/server-error
    Problem503:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            ServiceNotAvailable:
              summary: Service isn't available
              value:
                type: /problems/http/service-not-available
                title: Service not available
                status: 503
                detail: Specified operation cannot be performed due to service availability issues
                instance: /problems/http/service-not-available
  schemas:
    ResponsePage:
      type: object
      required:
        - items
      properties:
        self:
          description: Pagination link/cursor pointing to the current page.
          type: string
          format: uri
        first:
          description: Pagination link/cursor pointing to the first page.
          type: string
          format: uri
        prev:
          description: Pagination link/cursor pointing to the previous page.
          type: string
          format: uri
        next:
          description: Pagination link/cursor pointing to the next page.
          type: string
          format: uri
        last:
          description: Pagination link/cursor pointing to the last page.
          type: string
          format: uri
        items:
          description: Array of collection items.
          type: array
          items: {}
    Money:
      type: object
      properties:
        amount:
          type: number
          format: float
          description: "Monetary value."
        currency:
          type: string
          description: "Currency code in ISO-4217 format (3 letters)."
    ContactKind:
      type: string
      description: "Allowed values: TEL, MOBILE, EMAIL."
      enum: ["TEL", "MOBILE", "EMAIL"]
    ContactType:
      type: string
      description: "Allowed values: WORK, HOME."
      enum: ["WORK", "HOME"]
    Contact:
      type: object
      properties:
        id:
          type: string
          description: "Identifier of the contact."
        value:
          type: string
          description: "Actual contact value (e.g., phone number or email)."
        kind:
          $ref: '#/components/schemas/ContactKind'
        type:
          $ref: '#/components/schemas/ContactType'
        is_verified:
          type: boolean
          description: "Whether the contact is verified."
        is_authorized:
          type: boolean
          description: "Whether the contact is authorized."
    CreateContactRequest:
      type: object
      description: Schema for creating a new contact for the user.
      required:
        - value
        - kind
        - type
      properties:
        value:
          type: string
          description: "The contact value (e.g., phone number or email address)."
        kind:
          $ref: '#/components/schemas/ContactKind'
        type:
          $ref: '#/components/schemas/ContactType'
    GetSubscriptionResponse:
      type: object
      properties:
        id:
          type: string
          description: "Subscription ID."
        name:
          type: string
          description: "Subscription name."
        description:
          type: string
          description: "Subscription description."
        max_number_of_tasks:
          type: integer
          description: "Maximum number of tasks allowed."
        thumbnail:
          type: string
          description: "URL of the subscription thumbnail."
        started_at:
          type: string
          format: date-time
          description: "Start datetime of the subscription."
        finishes_at:
          type: string
          format: date-time
          description: "End datetime of the subscription."
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: "Unique username of the user."
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        contact:
          $ref: '#/components/schemas/CreateContactRequest'
        lives_in:
          type: string
          description: "City or region where user lives."
        birthdate:
          type: string
          format: date
          description: "User's birth date (YYYY-MM-DD)."
    UpdateUserByIdRequest:
      type: object
      properties:
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        lives_in:
          type: string
          description: "City or region where the user lives."
        birthdate:
          type: string
          format: date
          description: "User's birth date (YYYY-MM-DD)."
    GetUseByIdResponse:
      type: object
      properties:
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        lives_in:
          type: string
          description: "City or region where the user lives."
        birthdate:
          type: string
          format: date
          description: "User's birth date."
        Subscription:
          $ref: '#/components/schemas/GetSubscriptionResponse'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
    GetOfferResponse:
      type: object
      properties:
        id:
          type: string
          description: "Offer ID."
        name:
          type: string
          description: "Offer name."
        description:
          type: string
          description: "Offer description."
        max_number_of_tasks:
          type: integer
          description: "Maximum number of tasks permitted by this offer."
        thumbnail:
          type: string
          description: "URL of the offer thumbnail."
        price:
          $ref: '#/components/schemas/Money'
    TaskStatus:
      type: string
      description: "Allowed values: TODO, IN_PROGRESS, ON_HOLD, DONE."
      enum: ["TODO", "IN_PROGRESS", "ON_HOLD", "DONE"]
    CreateTaskRequest:
      type: object
      properties:
        name:
          type: string
          description: "Name of the task."
        description:
          type: string
          description: "Task description."
        labels:
          type: array
          items:
            type: string
          description: "Labels or tags for the task."
        priority:
          type: integer
          description: "Priority level of the task."
    GetListableTask:
      type: object
      properties:
        id:
          type: string
          description: "Task ID."
        name:
          type: string
          description: "Task name."
        status:
          $ref: '#/components/schemas/TaskStatus'
        labels:
          type: array
          items:
            type: string
          description: "Labels or tags associated with the task."
        created_at:
          type: string
          format: date-time
          description: "Datetime when the task was created."
    GetTaskResponse:
      type: object
      properties:
        id:
          type: string
          description: "Task ID."
        name:
          type: string
          description: "Task name."
        description:
          type: string
          description: "Task description."
        labels:
          type: array
          items:
            type: string
          description: "Labels associated with the task."
        created_at:
          type: string
          format: date-time
          description: "Datetime when the task was created."
        last_modified_at:
          type: string
          format: date-time
          description: "Datetime of the last update to the task."
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          type: integer
          description: "Priority level of the task."
    UpdateTaskRequest:
      description: "One of the following partial updates: status, priority, or the same structure as CreateTaskRequest."
      anyOf:
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/TaskStatus'
        - $ref: '#/components/schemas/CreateTaskRequest'
        - type: object
          properties:
            priority:
              type: integer
              description: "New priority for the task."
    AdminAPIGetUserResponse:
      type: object
      properties:
        id:
          type: string
          description: "Internal user ID."
        is_authorized:
          type: boolean
          description: "Whether the user is authorized."
        is_enabled:
          type: boolean
          description: "Whether the user is enabled."
        username:
          type: string
          description: "Username."
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        lives_in:
          type: string
          description: "User's city/region."
        birthdate:
          type: string
          format: date
          description: "User's birth date."
    AdminAPIGetUserByIdResponse:
      type: object
      properties:
        id:
          type: string
          description: "Internal user ID."
        is_authorized:
          type: boolean
          description: "Whether the user is authorized."
        is_enabled:
          type: boolean
          description: "Whether the user is enabled."
        username:
          type: string
          description: "Username."
        first_name:
          type: string
          description: "First name."
        last_name:
          type: string
          description: "Last name."
        lives_in:
          type: string
          description: "User's city/region."
        birthdate:
          type: string
          format: date
          description: "User's birth date."
        Subscription:
          $ref: '#/components/schemas/GetSubscriptionResponse'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        created_at:
          type: string
          format: date-time
          description: "Datetime when user was created."
        created_by:
          type: string
          description: "Identifier or name of the creator."
        last_modified_at:
          type: string
          format: date-time
          description: "Datetime of the last update."
        last_modified_by:
          type: string
          description: "Identifier or name of the last modifier."
    AdminAPIUpdateUserByIdRequest:
      description: "Combines UpdateUserByIdRequest fields plus optional 'is_authorized'."
      anyOf:
        - $ref: '#/components/schemas/UpdateUserByIdRequest'
        - type: object
          properties:
            is_authorized:
              type: boolean
              description: "Whether the user is authorized."
    AdminAPIGetSubscriptionByIdResponse:
      type: object
      properties:
        id:
          type: string
          description: "Subscription ID."
        name:
          type: string
          description: "Subscription name."
        description:
          type: string
          description: "Subscription description."
        max_number_of_tasks:
          type: integer
          description: "Maximum tasks."
        thumbnail:
          type: string
          description: "Thumbnail URL."
        started_at:
          type: string
          format: date-time
          description: "Start datetime."
        finishes_at:
          type: string
          format: date-time
          description: "Finish datetime."
        created_at:
          type: string
          format: date-time
          description: "Datetime when the subscription was created."
        created_by:
          type: string
          description: "Creator identifier."
    AdminAPICreateOfferRequest:
      type: object
      properties:
        id:
          type: string
          description: "Offer ID."
        name:
          type: string
          description: "Offer name."
        description:
          type: string
          description: "Offer description."
        max_number_of_tasks:
          type: integer
          description: "Maximum tasks for this offer."
        thumbnail:
          type: string
          description: "Thumbnail URL."
        is_enabled:
          type: boolean
          description: "Whether the offer is enabled."
        expires_at:
          type: string
          format: date-time
          description: "Datetime when the offer expires."
    AdminAPIUpdateOfferByIdRequest:
      description: "Payload for partial or full offer update, also can update 'is_enabled'."
      anyOf:
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            max_number_of_tasks:
              type: integer
            thumbnail:
              type: string
            expires_at:
              type: string
              format: date-time
            price:
              $ref: '#/components/schemas/Money'
        - type: object
          properties:
            is_enabled:
              type: boolean
    AdminAPIGetOfferByIdResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        max_number_of_tasks:
          type: integer
        thumbnail:
          type: string
        is_enabled:
          type: boolean
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        created_by:
          type: string
        last_modified_at:
          type: string
          format: date-time
        last_modified_by:
          type: string
        price:
          $ref: '#/components/schemas/Money'
    AdminAPIGetListableTaskResponse:
      allOf:
        - $ref: '#/components/schemas/GetListableTask'
        - type: object
          properties:
            created_by:
              type: string
              description: "Creator identifier."
            last_modified_by:
              type: string
              description: "Last modifier identifier."
    AdminAPIGetTaskByIdResponse:
      allOf:
        - $ref: '#/components/schemas/GetTaskResponse'
        - type: object
          properties:
            created_by:
              type: string
              description: "Creator identifier."
            last_modified_by:
              type: string
              description: "Last modifier identifier."
    ResponsePageOfOffer:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of Offer objects."
              type: array
              items:
                $ref: '#/components/schemas/GetOfferResponse'
    ResponsePageOfListableTask:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of tasks."
              type: array
              items:
                $ref: '#/components/schemas/GetListableTask'
    ResponsePageOfAdminAPIGetUserResponse:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of admin user responses."
              type: array
              items:
                $ref: '#/components/schemas/AdminAPIGetUserResponse'
    ResponsePageOfAdminAPIGetListableTaskResponse:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of admin listable tasks."
              type: array
              items:
                $ref: '#/components/schemas/AdminAPIGetListableTaskResponse'
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in the
            context of the provided API. Opposed to the specification in RFC-9457,
            it is neither recommended to be dereferenceable and point to a
            human-readable documentation nor globally unique for the problem type.
          default: 'about:blank'
          example: '/some/uri-reference'
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually not
            suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the problem,
            e.g. by adding a fragment identifier or sub-path to the problem type.
            May be used to locate the root of this problem in the source code.
          example: '/some/uri-reference#specific-occurrence-context'
  examples:
    MinimumAgeConstraintViolation:
      summary: Whenever the specified age (birthdate) is not match the minimum requirement
      value:
        type: /problems/constraint-violation/birthdate/minimum
        title: Constraint Violation
        status: 422
        detail: Birthdate must match the minimum requirement
        instance: /problems/constraint-violation/birthdate/minimum/traceId
    UnrecognizableLivesInConstraintViolation:
      summary: Whenever the specified lives_in location is not supported
      value:
        type: /problems/constraint-violation/lives_in/unrecognized
        title: Constraint Violation
        status: 422
        detail: Specified lives_in not supported.
        instance: /problems/constraint-violation/lives_in/unrecognized/traceId
    UnsupportedMobileNumber:
      summary: Whenever the specified Contact phone number is not supported
      value:
        type: /problems/constraint-violation/contact/mobile-not-supported
        title: Constraint Violation
        status: 422
        detail: Specified contact is not supported.
        instance: /problems/constraint-violation/contact/mobile-not-supported/traceId
    UnsupportedEmail:
      summary: Whenever the specified Contact email is not supported
      value:
        type: /problems/constraint-violation/contact/email-not-supported
        title: Constraint Violation
        status: 422
        detail: Specified contact is not supported.
        instance: /problems/constraint-violation/contact/email-not-supported/traceId
    LastNameNotSupported:
      summary: Whenever the specified last name is not supported
      value:
        type: /problems/constraint-violation/last_name/not-supported
        title: Constraint Violation
        status: 422
        detail: Specified last_name is not supported.
        instance: /problems/constraint-violation/last_name/not-supported
    FirstNameNotSupported:
      summary: Whenever the specified first name is not supported
      value:
        type: /problems/constraint-violation/first_name/not-supported
        title: Constraint Violation
        status: 422
        detail: Specified first_name is not supported.
        instance: /problems/constraint-violation/first_name/not-supported
security:
  - public: []
  - private: []
paths:
  /health:
    get:
      tags:
        - SYSTEM-API
      summary: Health check
      description: Returns the current health status of the service.
      security:
        - public: []
      responses:
        '200':
          description: OK. Health status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "Possible values: HEALTHY, UNHEALTHY."
        '503':
          $ref: '#/components/responses/Problem503'
  /users:
    post:
      tags:
        - PUBLIC-API
      operationId: CreateUser
      summary: Creates a User
      description: Allows the registration of an User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["OK"]
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '409':
          description: Whenever the username or contact is not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                UsernameNotAvailable:
                  summary: Whenever the specified username is not available
                  value:
                    type: /problems/username/not-available
                    title: Username not available
                    status: 409
                    detail: The specified username is not available
                    instance: /problems/username/not-available/traceId
                ContactNotAvailable:
                  summary: Whenever the specified contact is not available
                  value:
                    type: /problems/contact/not-available
                    title: Contact not available
                    status: 409
                    detail: The specified contact is not available
                    instance: /problems/contact/not-available/traceId
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                MinimumAgeConstraintViolation:
                  $ref: '#/components/examples/MinimumAgeConstraintViolation'
                UnrecognizableLivesInConstraintViolation:
                  $ref: '#/components/examples/UnrecognizableLivesInConstraintViolation'
                UnsupportedMobileNumber:
                  $ref: '#/components/examples/UnsupportedMobileNumber'
                UnsupportedEmail:
                  $ref: '#/components/examples/UnsupportedEmail'
                LastNameNotSupported:
                  $ref: '#/components/examples/LastNameNotSupported'
                FirstNameNotSupported:
                  $ref: '#/components/examples/FirstNameNotSupported'
                UsernameNotSupported:
                  summary: Whenever the specified username is not supported
                  value:
                    type: /problems/constraint-violation/username/not-supported
                    title: Constraint Violation
                    status: 422
                    detail: Specified username is not supported.
                    instance: /problems/constraint-violation/username/not-supported
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /offers:
    get:
      tags:
        - PUBLIC-API
      summary: List available offers
      description: Returns a list of available offers.
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
          description: "Number of items per page."
      responses:
        '200':
          description: OK. A paginated list of offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfOffer'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /users/self:
    get:
      tags:
        - PUBLIC-API
      summary: Retrieve current user's data
      description: Requires authentication (private)
      security:
        - private:
            - "user:read"
      responses:
        '200':
          description: OK. User data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUseByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    patch:
      tags:
        - PUBLIC-API
      summary: Partially update current user's data
      description: Requires authentication (private)
      security:
        - private:
            - "user:write"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserByIdRequest'
      responses:
        '200':
          description: OK. User updated.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /users/self/contacts:
    post:
      tags:
        - PUBLIC-API
      summary: Create a new contact for the current user
      description: Requires authentication (private)
      security:
        - private:
            - "contact:write"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
      responses:
        '200':
          description: OK. Returns the created contact ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: "ID of the created contact."
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/contacts/verify:
    post:
      tags:
        - PUBLIC-API
      summary: Verify one of the user's contacts
      description: Requires authentication (private)
      security:
        - private:
            - "contact:verify"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: "Verification code."
      responses:
        '204':
          description: No Content. Contact verified successfully.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/contacts/{id}:
    delete:
      tags:
        - PUBLIC-API
      summary: Delete a specific contact from the current user
      description: Requires authentication (private)
      security:
        - private:
            - "contact:delete"
      parameters:
        - name: id
          in: path
          required: true
          description: "Contact ID to delete."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Contact deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /tasks:
    post:
      tags:
        - PUBLIC-API
      summary: Create a new task
      description: Requires authentication (private)
      security:
        - private:
            - "task:write"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '200':
          description: OK. Task created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '409':
          $ref: '#/components/responses/Problem409'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    get:
      tags:
        - PUBLIC-API
      summary: List all tasks for the current user
      description: Requires authentication (private).
      security:
        - private:
            - "task:read"
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
          description: "Number of tasks to fetch."
      responses:
        '200':
          description: OK. Returns a paginated list of tasks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfListableTask'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /tasks/{id}:
    get:
      tags:
        - PUBLIC-API
      summary: Retrieve a specific task by ID
      description: Requires authentication (private)
      security:
        - private:
            - "task:read"
      parameters:
        - name: id
          in: path
          required: true
          description: "Task ID."
          schema:
            type: string
        - name: s
          in: query
          schema:
            type: string
          description: "Example query param for search."
        - name: priority
          in: query
          schema:
            type: integer
          description: "Example query param for priority."
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
        - name: sort
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK. Task details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    patch:
      tags:
        - PUBLIC-API
      summary: Partially update a task
      description: Requires authentication (private)
      security:
        - private:
            - "task:write"
      parameters:
        - name: id
          in: path
          required: true
          description: "Task ID."
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: OK. Task updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    delete:
      tags:
        - PUBLIC-API
      summary: Delete a task
      description: Requires authentication (private)
      security:
        - private:
            - "task:delete"
      parameters:
        - name: id
          in: path
          required: true
          description: "Task ID."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Task deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/subscriptions:
    post:
      tags:
        - PUBLIC-API
      summary: Create a new subscription for the current user
      description: Requires authentication (private)
      security:
        - private:
            - "subscription:write"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offer:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "Offer ID."
                contact:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "Contact ID."
      responses:
        '204':
          description: No Content. Subscription created.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '408':
          description: Request Timeout (e.g., payment timeout).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          $ref: '#/components/responses/Problem409'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/subscriptions/latest:
    get:
      tags:
        - PUBLIC-API
      summary: Retrieve the latest subscription of the current user
      description: Requires authentication (private).
      security:
        - private:
            - "subscription:read"
      responses:
        '200':
          description: OK. Latest subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
        '204':
          description: No Content. No subscription found.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users:
    get:
      tags:
        - PRIVATE-API
      summary: List users (admin)
      description: Requires role=ADMIN and scope, e.g. admin:read.
      security:
        - private:
            - "admin:read"
      x-role:
        - ADMIN
      parameters:
        - name: s
          in: query
          schema:
            type: string
          description: "Search string."
        - name: status
          in: query
          schema:
            type: string
          description: "Filter by status."
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
          description: "Number of items to fetch."
        - name: sort
          in: query
          schema:
            type: string
          description: "Sort order."
      responses:
        '200':
          description: OK. A paginated list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfAdminAPIGetUserResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}:
    get:
      tags:
        - PRIVATE-API
      summary: Retrieve details of a specific user (admin)
      description: Requires role=ADMIN and scope admin:read.
      security:
        - private:
            - "admin:read"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to retrieve."
          schema:
            type: string
      responses:
        '200':
          description: OK. User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetUserByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    patch:
      tags:
        - PRIVATE-API
      summary: Partially update a user (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to update."
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAPIUpdateUserByIdRequest'
      responses:
        '200':
          description: OK. Returns updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetUserByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags:
        - PRIVATE-API
      summary: Delete a user (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to delete."
          schema:
            type: string
      responses:
        '204':
          description: No Content. User deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}/contacts/{key}:
    delete:
      tags:
        - PRIVATE-API
      summary: Delete a contact from a user (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID."
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Contact key to delete."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Contact deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/subscriptions:
    post:
      tags:
        - PRIVATE-API
      summary: Create multiple subscriptions (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: "Subscription ID."
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "User ID."
                  offer:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "Offer ID."
      responses:
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    status:
                      type: string
                    description:
                      type: string
                    type:
                      type: string
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/subscriptions/{id}:
    get:
      tags:
        - PRIVATE-API
      summary: Retrieve a subscription by ID (admin)
      description: Requires role=ADMIN and scope admin:read.
      security:
        - private:
            - "admin:read"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "Subscription ID."
          schema:
            type: string
      responses:
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetSubscriptionByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags:
        - PRIVATE-API
      summary: Delete a subscription (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "Subscription ID."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Subscription deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/offers:
    post:
      tags:
        - PRIVATE-API
      summary: Create offers (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdminAPICreateOfferRequest'
      responses:
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    status:
                      type: string
                    description:
                      type: string
                    type:
                      type: string
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/offers/{id}:
    get:
      tags:
        - PRIVATE-API
      summary: Get an offer by ID (admin)
      description: Requires role=ADMIN and scope admin:read.
      security:
        - private:
            - "admin:read"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "Offer ID."
          schema:
            type: string
      responses:
        '200':
          description: OK. Offer details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIUpdateOfferByIdRequest'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    patch:
      tags:
        - PRIVATE-API
      summary: Partially update an offer (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "Offer ID."
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAPIUpdateOfferByIdRequest'
      responses:
        '200':
          description: OK. Returns updated offer details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetOfferByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags:
        - PRIVATE-API
      summary: Delete an offer (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "Offer ID."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Offer deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}/tasks:
    get:
      tags:
        - PRIVATE-API
      summary: List tasks for a specific user (admin)
      description: Requires role=ADMIN and scope admin:read.
      security:
        - private:
            - "admin:read"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to list tasks for."
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
          description: "Filter by status."
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
          description: "Number of tasks to fetch."
        - name: sort
          in: query
          schema:
            type: string
          description: "Sort order."
      responses:
        '200':
          description: OK. Returns a paginated list of tasks for the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfAdminAPIGetListableTaskResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}/tasks/{key}:
    get:
      tags:
        - PRIVATE-API
      summary: Retrieve details of a specific task for a user (admin)
      description: Requires role=ADMIN and scope admin:read.
      security:
        - private:
            - "admin:read"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID."
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Task ID or key."
          schema:
            type: string
      responses:
        '200':
          description: OK. Task details for the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetTaskByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags:
        - PRIVATE-API
      summary: Delete a specific task for a user (admin)
      description: Requires role=ADMIN and scope admin:write.
      security:
        - private:
            - "admin:write"
      x-role:
        - ADMIN
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID."
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Task ID to delete."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Task deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
