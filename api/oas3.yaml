openapi: 3.0.3
info:
  title: Core Service API
  description: A simple API to manage tasks.
  version: 1.0.0
  contact:
    name: RaitonBL
    url: https://raitonbl.com
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html#apache-license-version-20
tags:
  - name: CONSUMER API
    description: operations that manages User and Task from the perspective of a regular User.
  - name: ADMINISTRATIVE API
    description: operations that allow management of System (User & Subscriptions).
  - name: SYSTEM API
    description: operations intended for system checks
components:
  securitySchemes:
    public:
      type: openIdConnect
      openIdConnectUrl: https://sso.raitonbl.com/.well-known/openid-configuration
    private:
      type: openIdConnect
      openIdConnectUrl: https://auth.raitonbl.com/.well-known/openid-configuration
  responses:
    TaskNotFound:
      description: Whenever Task does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            TaskDoesNotExist:
              $ref: '#/components/examples/TaskDoesNotExist'
    UserNotFound:
      description: Whenever User does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            TaskDoesNotExist:
              $ref: '#/components/examples/UserDoesNotExist'
    OfferDoesNotExist:
      description: Whenever Offer does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            TaskDoesNotExist:
              $ref: '#/components/examples/OfferDoesNotExist'
    SubscriptionNotFound:
      description: Whenever Subscription does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            SubscriptionNotFound:
              description: Subscription does not exist
              value:
                summary: Whenever the specified subscription does not exist
                value:
                  type: /problems/subscription/not-found
                  title: Not Found
                  status: 404
                  detail: The specified subscription doesn't exist.
                  instance: /problems/subscription/not-found/$traceId
    Problem400:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Problem401:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            AccessTokenNotSupported:
              summary: Whenever the access token is missing or the access token isn't valid
              value:
                type: /problems/http/unauthorized
                title: Unauthorized
                status: 401
                detail: Request not authorized to perform operation
                instance: /problems/http/unauthorized
    Problem403:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            AccessTokenNotAuthorized:
              summary: Whenever the access token is not authorized to perform operation
              value:
                type: /problems/http/not-authorized
                title: Forbidden
                status: 403
                detail: Request not authorized to perform operation
                instance: /problems/http/not-authorized
    Problem404:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            ResourceNotFound:
              summary: Whenever the operation doesn't exist
              value:
                type: /problems/http/not-found
                title: NotFound
                status: 404
                detail: Specified operation doesn't exist
                instance: /problems/http/not-found
    Problem409:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Problem422:
      description: Unprocessable Entity
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Problem500:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            SomethingWentWrong:
              summary: Operation cannot be performed due to an error
              value:
                type: /problems/http/server-error
                title: Something went wrong
                status: 500
                detail: Specified operation cannot be performed due to an error
                instance: /problems/http/server-error
    Problem503:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            ServiceNotAvailable:
              summary: Service isn't available
              value:
                type: /problems/http/service-not-available
                title: Service not available
                status: 503
                detail: Specified operation cannot be performed due to service availability issues
                instance: /problems/http/service-not-available
  parameters:
    TicketId:
      name: "X-Ticket-Id"
      in: "header"
      required: true
      description: Represents the code of a Ticket submitted that initiates a Support Operation
      schema:
        type: string
    TicketSystem:
      name: "X-Ticket-System"
      in: "header"
      required: true
      description: Represents the name of the System that the Support Ticket belongs to
      schema:
        type: string
  schemas:
    ResponsePage:
      type: object
      required:
        - items
      properties:
        self:
          description: Pagination link/cursor pointing to the current page.
          type: string
          format: uri
        first:
          description: Pagination link/cursor pointing to the first page.
          type: string
          format: uri
        prev:
          description: Pagination link/cursor pointing to the previous page.
          type: string
          format: uri
        next:
          description: Pagination link/cursor pointing to the next page.
          type: string
          format: uri
        last:
          description: Pagination link/cursor pointing to the last page.
          type: string
          format: uri
        items:
          description: Array of collection items.
          type: array
          items: { }
    Money:
      type: object
      properties:
        amount:
          type: number
          format: float
          description: "Monetary value."
        currency:
          type: string
          description: "Currency code in ISO-4217 format (3 letters)."
    ContactKind:
      type: string
      description: "Allowed values: TEL, MOBILE, EMAIL."
      enum: [ "TEL", "MOBILE", "EMAIL" ]
    ContactType:
      type: string
      description: "Allowed values: WORK, HOME."
      enum: [ "WORK", "HOME" ]
    Contact:
      type: object
      properties:
        id:
          type: string
          description: "Identifier of the contact."
        value:
          type: string
          description: "Actual contact value (e.g., phone number or email)."
        kind:
          $ref: '#/components/schemas/ContactKind'
        type:
          $ref: '#/components/schemas/ContactType'
        is_verified:
          type: boolean
          description: "Whether the contact is verified."
        is_authorized:
          type: boolean
          description: "Whether the contact is authorized."
    CreateContactRequest:
      type: object
      description: Schema for creating a new contact for the user.
      required:
        - value
        - kind
        - type
      properties:
        value:
          type: string
          description: "The contact value (e.g., phone number or email address)."
        kind:
          $ref: '#/components/schemas/ContactKind'
        type:
          $ref: '#/components/schemas/ContactType'
    GetSubscriptionResponse:
      type: object
      properties:
        id:
          type: string
          description: "Subscription ID."
        name:
          type: string
          description: "Subscription name."
        description:
          type: string
          description: "Subscription description."
        max_number_of_tasks:
          type: integer
          description: "Maximum number of tasks allowed."
        started_at:
          type: string
          format: date-time
          description: "Start datetime of the subscription."
        finishes_at:
          type: string
          format: date-time
          description: "End datetime of the subscription."
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: "Unique username of the user."
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        contact:
          $ref: '#/components/schemas/CreateContactRequest'
        lives_in:
          type: string
          description: "City or region where user lives."
        birthdate:
          type: string
          format: date
          description: "User's birth date (YYYY-MM-DD)."
    UpdateUserByIdRequest:
      type: object
      properties:
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        lives_in:
          type: string
          description: "City or region where the user lives."
        birthdate:
          type: string
          format: date
          description: "User's birth date (YYYY-MM-DD)."
    GetUseByIdResponse:
      type: object
      properties:
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        lives_in:
          type: string
          description: "City or region where the user lives."
        birthdate:
          type: string
          format: date
          description: "User's birth date."
        Subscription:
          $ref: '#/components/schemas/GetSubscriptionResponse'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
    GetOfferResponse:
      type: object
      properties:
        id:
          type: string
          description: "Offer ID."
        name:
          type: string
          description: "Offer name."
        description:
          type: string
          description: "Offer description."
        max_number_of_tasks:
          type: integer
          description: "Maximum number of tasks permitted by this offer."
        price:
          $ref: '#/components/schemas/Money'
    TaskStatus:
      type: string
      description: "Allowed values: TODO, IN_PROGRESS, ON_HOLD, DONE."
      enum: [ "TODO", "IN_PROGRESS", "ON_HOLD", "DONE" ]
    CreateTaskRequest:
      type: object
      properties:
        name:
          type: string
          description: "Name of the task."
        description:
          type: string
          description: "Task description."
        labels:
          type: array
          items:
            type: string
          description: "Labels or tags for the task."
        priority:
          type: integer
          description: "Priority level of the task."
    GetListableTask:
      type: object
      properties:
        id:
          type: string
          description: "Task ID."
        name:
          type: string
          description: "Task name."
        status:
          $ref: '#/components/schemas/TaskStatus'
        labels:
          type: array
          items:
            type: string
          description: "Labels or tags associated with the task."
        created_at:
          type: string
          format: date-time
          description: "Datetime when the task was created."
    GetTaskResponse:
      type: object
      properties:
        id:
          type: string
          description: "Task ID."
        name:
          type: string
          description: "Task name."
        description:
          type: string
          description: "Task description."
        labels:
          type: array
          items:
            type: string
          description: "Labels associated with the task."
        created_at:
          type: string
          format: date-time
          description: "Datetime when the task was created."
        last_modified_at:
          type: string
          format: date-time
          description: "Datetime of the last update to the task."
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          type: integer
          description: "Priority level of the task."
    UpdateTaskRequest:
      description: "One of the following partial updates: status, priority, or the same structure as CreateTaskRequest."
      anyOf:
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/TaskStatus'
        - $ref: '#/components/schemas/CreateTaskRequest'
        - type: object
          properties:
            priority:
              type: integer
              description: "New priority for the task."
    AdminAPIGetUserResponse:
      type: object
      properties:
        id:
          type: string
          description: "Internal user ID."
        is_authorized:
          type: boolean
          description: "Whether the user is authorized."
        is_enabled:
          type: boolean
          description: "Whether the user is enabled."
        username:
          type: string
          description: "Username."
        first_name:
          type: string
          description: "User's first name."
        last_name:
          type: string
          description: "User's last name."
        lives_in:
          type: string
          description: "User's city/region."
        birthdate:
          type: string
          format: date
          description: "User's birth date."
    AdminAPIGetUserByIdResponse:
      type: object
      properties:
        id:
          type: string
          description: "Internal user ID."
        is_authorized:
          type: boolean
          description: "Whether the user is authorized."
        is_enabled:
          type: boolean
          description: "Whether the user is enabled."
        username:
          type: string
          description: "Username."
        first_name:
          type: string
          description: "First name."
        last_name:
          type: string
          description: "Last name."
        lives_in:
          type: string
          description: "User's city/region."
        birthdate:
          type: string
          format: date
          description: "User's birth date."
        Subscription:
          $ref: '#/components/schemas/GetSubscriptionResponse'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        created_at:
          type: string
          format: date-time
          description: "Datetime when user was created."
        created_by:
          type: string
          description: "Identifier or name of the creator."
        last_modified_at:
          type: string
          format: date-time
          description: "Datetime of the last update."
        last_modified_by:
          type: string
          description: "Identifier or name of the last modifier."
    AdminAPIUpdateUserByIdRequest:
      description: "Combines UpdateUserByIdRequest fields plus optional 'is_authorized'."
      anyOf:
        - $ref: '#/components/schemas/UpdateUserByIdRequest'
        - type: object
          properties:
            is_authorized:
              type: boolean
              description: "Whether the user is authorized."
    AdminAPIGetSubscriptionByIdResponse:
      type: object
      properties:
        id:
          type: string
          description: "Subscription ID."
        name:
          type: string
          description: "Subscription name."
        description:
          type: string
          description: "Subscription description."
        max_number_of_tasks:
          type: integer
          description: "Maximum tasks."
        started_at:
          type: string
          format: date-time
          description: "Start datetime."
        finishes_at:
          type: string
          format: date-time
          description: "Finish datetime."
        created_at:
          type: string
          format: date-time
          description: "Datetime when the subscription was created."
        created_by:
          type: string
          description: "Creator identifier."
    AdminAPICreateOfferRequest:
      type: object
      properties:
        id:
          type: string
          description: "Offer ID."
        name:
          type: string
          description: "Offer name."
        description:
          type: string
          description: "Offer description."
        max_number_of_tasks:
          type: integer
          description: "Maximum tasks for this offer."
        is_enabled:
          type: boolean
          description: "Whether the offer is enabled."
        expires_at:
          type: string
          format: date-time
          description: "Datetime when the offer expires."
    AdminAPIUpdateOfferByIdRequest:
      description: "Payload for partial or full offer update, also can update 'is_enabled'."
      anyOf:
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            max_number_of_tasks:
              type: integer
            expires_at:
              type: string
              format: date-time
            price:
              $ref: '#/components/schemas/Money'
        - type: object
          properties:
            is_enabled:
              type: boolean
    AdminAPIGetOfferByIdResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        max_number_of_tasks:
          type: integer
        is_enabled:
          type: boolean
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        created_by:
          type: string
        last_modified_at:
          type: string
          format: date-time
        last_modified_by:
          type: string
        price:
          $ref: '#/components/schemas/Money'
    AdminAPIGetListableTaskResponse:
      allOf:
        - $ref: '#/components/schemas/GetListableTask'
        - type: object
          properties:
            created_by:
              type: string
              description: "Creator identifier."
            last_modified_by:
              type: string
              description: "Last modifier identifier."
    AdminAPIGetTaskByIdResponse:
      allOf:
        - $ref: '#/components/schemas/GetTaskResponse'
        - type: object
          properties:
            created_by:
              type: string
              description: "Creator identifier."
            last_modified_by:
              type: string
              description: "Last modifier identifier."
    ResponsePageOfOffer:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of Offer objects."
              type: array
              items:
                $ref: '#/components/schemas/GetOfferResponse'
    ResponsePageOfListableTask:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of tasks."
              type: array
              items:
                $ref: '#/components/schemas/GetListableTask'
    ResponsePageOfAdminAPIGetUserResponse:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of admin user responses."
              type: array
              items:
                $ref: '#/components/schemas/AdminAPIGetUserResponse'
    ResponsePageOfAdminAPIGetListableTaskResponse:
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
        - type: object
          properties:
            items:
              description: "Array of admin listable tasks."
              type: array
              items:
                $ref: '#/components/schemas/AdminAPIGetListableTaskResponse'
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in the
            context of the provided API. Opposed to the specification in RFC-9457,
            it is neither recommended to be dereferenceable and point to a
            human-readable documentation nor globally unique for the problem type.
          default: 'about:blank'
          example: '/some/uri-reference'
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually not
            suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the problem,
            e.g. by adding a fragment identifier or sub-path to the problem type.
            May be used to locate the root of this problem in the source code.
          example: '/some/uri-reference#specific-occurrence-context'
    BulkOperationResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          status:
            type: string
          description:
            type: string
          problem:
            $ref: "#/components/schemas/Problem"
  examples:
    MinimumAgeConstraintViolation:
      summary: Whenever the specified age (birthdate) is not match the minimum requirement
      value:
        type: /problems/constraint-violation/birthdate/minimum
        title: Constraint Violation
        status: 422
        detail: Birthdate must match the minimum requirement
        instance: /problems/constraint-violation/birthdate/minimum/$traceId
    UnrecognizableLivesInConstraintViolation:
      summary: Whenever the specified lives_in location is not supported
      value:
        type: /problems/constraint-violation/lives_in/unrecognized
        title: Constraint Violation
        status: 422
        detail: Specified lives_in not supported.
        instance: /problems/constraint-violation/lives_in/unrecognized/$traceId
    UnsupportedMobileNumber:
      summary: Whenever the specified Contact phone number is not supported
      value:
        type: /problems/constraint-violation/contact/mobile-not-supported
        title: Constraint Violation
        status: 422
        detail: Specified contact is not supported.
        instance: /problems/constraint-violation/contact/mobile-not-supported/$traceId
    UnsupportedEmail:
      summary: Whenever the specified Contact email is not supported
      value:
        type: /problems/constraint-violation/contact/email-not-supported
        title: Constraint Violation
        status: 422
        detail: Specified contact is not supported.
        instance: /problems/constraint-violation/contact/email-not-supported/$traceId
    LastNameNotSupported:
      summary: Whenever the specified last name is not supported
      value:
        type: /problems/constraint-violation/last_name/not-supported
        title: Constraint Violation
        status: 422
        detail: Specified last_name is not supported.
        instance: /problems/constraint-violation/last_name/not-supported
    FirstNameNotSupported:
      summary: Whenever the specified first name is not supported
      value:
        type: /problems/constraint-violation/first_name/not-supported
        title: Constraint Violation
        status: 422
        detail: Specified first_name is not supported.
        instance: /problems/constraint-violation/first_name/not-supported
    ContactDoesNotExist:
      summary: Whenever the specified contact does not belong to the User
      value:
        type: /problems/contact/not-found
        title: Not Found
        status: 404
        detail: The specified contact doesn't exist or doesn't belong to the User.
        instance: /problems/contact/not-found/not-supported
    TaskNameNotSupported:
      value:
        type: /problems/constraint-violation/task/name
        title: Constraint Violation
        status: 422
        detail: The specified name is not supported nor allowed.
        instance: /problems/constraint-violation/task/name/$traceId
    TaskDescriptionNotSupported:
      value:
        type: /problems/constraint-violation/task/description
        title: Constraint Violation
        status: 422
        detail: The specified description is not supported nor allowed.
        instance: /problems/constraint-violation/task/description/$traceId
    TaskLabelNotSupported:
      value:
        type: /problems/constraint-violation/task/labels/0
        title: Constraint Violation
        status: 422
        detail: The specified label is not supported nor allowed.
        instance: /problems/constraint-violation/task/labels/0/$traceId
    TaskPriorityNotSupported:
      value:
        type: /problems/constraint-violation/task/priority
        title: Constraint Violation
        status: 422
        detail: The specified priority is not allowed.
        instance: /problems/constraint-violation/task/priority
        context:
          minimum: 0
          maximum: 7
    TaskDoesNotExist:
      summary: Whenever the specified task does not exist
      value:
        type: /problems/task/not-found
        title: Not Found
        status: 404
        detail: The specified task doesn't exist or doesn't belong to the User.
        instance: /problems/task/not-found/$traceId
    TaskStatusNotSupported:
      value:
        type: /problems/constraint-violation/task/status
        title: Constraint Violation
        status: 422
        detail: The specified status is not allowed.
        instance: /problems/constraint-violation/task/status
    OfferDoesNotExist:
      summary: Whenever the specified offer does not exist
      value:
        type: /problems/offer/not-found
        title: Not Found
        status: 404
        detail: The specified offer doesn't exist.
        instance: /problems/offer/not-found/$traceId
    TicketIdConstraintViolation:
      summary: Whenever Ticket is missing on support Operation
      value:
        type: /problems/audit/missing-ticket-id
        title: Forbidden
        status: 400
        detail: Missing Ticket Id
        instance: /problems/offer/not-found/$traceId
    TicketSystemConstraintViolation:
      summary: Whenever Ticket System is missing on support Operation
      value:
        type: /problems/audit/missing-ticket-system
        title: Forbidden
        status: 400
        detail: Missing Ticket Id
        instance: /problems/audit/missing-ticket-system/$traceId
    UserDoesNotExist:
      summary: Whenever the specified user does not exist
      value:
        type: /problems/user/not-found
        title: Not Found
        status: 404
        detail: The specified User doesn't exist.
        instance: /problems/user/not-found/$traceId
    MaxNumberOfTasksExceeded:
      summary: Whenever the specified number of tasks exceeds the allowed maximum
      value:
        type: /problems/constraint-violation/max_number_of_tasks/exceeded
        title: Constraint Violation
        status: 422
        detail: The specified max_number_of_tasks exceeds the allowed limit.
        instance: /problems/constraint-violation/max_number_of_tasks/exceeded
    InvalidExpiryDate:
      summary: Whenever the expiry date is invalid or in the past
      value:
        type: /problems/constraint-violation/expires_at/invalid-date
        title: Constraint Violation
        status: 422
        detail: The specified expires_at value is invalid or in the past.
        instance: /problems/constraint-violation/expires_at/invalid-date
    UnsupportedCurrency:
      summary: Whenever the specified currency is not supported
      value:
        type: /problems/constraint-violation/price/currency/not-supported
        title: Constraint Violation
        status: 422
        detail: The specified currency is not supported.
        instance: /problems/constraint-violation/price/currency/not-supported
    NegativePriceAmount:
      summary: Whenever the specified price amount is negative
      value:
        type: /problems/constraint-violation/price/amount/negative
        title: Constraint Violation
        status: 422
        detail: The specified price amount cannot be negative.
        instance: /problems/constraint-violation/price/amount/negative
    CreateOfferResponse:
      summary: A Generic Response
      value:
        - id: ecbfb414-cc26-46b8-b5ce-edce161d3e44
          status: CREATED
          description: Offer successfully created
        - id: 7c51b950-72e8-42c1-a7ea-32df3c7bdcb3
          status: NOT_CREATED
          description: Cannot create Offer due to validation issues
          problem:
            type: /problems/constraint-violation/price/amount/negative
            title: Constraint Violation
            status: 422
            detail: The specified price amount cannot be negative.
            instance: /problems/constraint-violation/price/amount/negative
        - id: ffcb70af-8d1f-4e0d-988c-79f93a955143
          status: NOT_CREATED
          description: Cannot create Offer due to validation issues
          problem:
            type: /problems/constraint-violation/price/currency/not-supported
            title: Constraint Violation
            status: 422
            detail: The specified currency is not supported.
            instance: /problems/constraint-violation/price/currency/not-supported
        - id: 3c3b3cdf-09cd-488c-b1ef-346ba9a1779e
          status: NOT_CREATED
          description: Cannot create Offer due to validation issues
          problem:
            type: /problems/constraint-violation/expires_at/invalid-date
            title: Constraint Violation
            status: 422
            detail: The specified expires_at value is invalid or in the past.
            instance: /problems/constraint-violation/expires_at/invalid-date
        - id: 0a0eb143-8b02-4579-8ca0-fc8605abb575
          status: NOT_CREATED
          description: Cannot create Offer due to validation issues
          problem:
            type: /problems/constraint-violation/max_number_of_tasks/exceeded
            title: Constraint Violation
            status: 422
            detail: The specified max_number_of_tasks exceeds the allowed limit.
            instance: /problems/constraint-violation/max_number_of_tasks/exceeded
    CreateSubscriptionResponse:
      summary: A Generic Response
      value:
        - id: ecbfb414-cc26-46b8-b5ce-edce161d3e44
          status: CREATED
          description: Subscription successfully created
        - id: 7c51b950-72e8-42c1-a7ea-32df3c7bdcb3
          status: NOT_CREATED
          description: Cannot create Subscription due to validation issues
          problem:
            type: /problems/subscription/offer-not-available
            title: Unprocessable Entity
            status: 422
            detail: The specified offer isn't available to subscribe to
            instance: /problems/subscription/offer-not-available/$traceId
        - id: ffcb70af-8d1f-4e0d-988c-79f93a955143
          status: NOT_CREATED
          description: Cannot create Subscription due to validation issues
          problem:
            type: /problems/subscription/contact-not-found
            title: Unprocessable Entity
            status: 422
            detail: The specified contact does not exist or doesn't belong to the User.
            instance: /problems/subscription/contact-not-found/$traceId
        - id: 3c3b3cdf-09cd-488c-b1ef-346ba9a1779e
          status: NOT_CREATED
          description: Cannot create Subscription due to validation issues
          problem:
            type: /problems/subscription/contact-kind-not-supported
            title: Unprocessable Entity
            status: 422
            detail: The specified contact kind does not allow payments to occur
            instance: /problems/subscription/contact-kind-not-supported/$traceId
        - id: 0a0eb143-8b02-4579-8ca0-fc8605abb575
          status: NOT_CREATED
          description: Cannot create Subscription due to validation issues
          problem:
            type: /problems/subscription/contact-not-verified
            title: Unprocessable Entity
            status: 422
            detail: The specified contact isn't verified therefore cannot be used to make payment
            instance: /problems/subscription/contact-not-verified/$traceId
security:
  - public: [ "user:read" ]
  - private: [ ]
paths:
  /health:
    get:
      tags: [ "SYSTEM API" ]
      summary: Health check
      description: Returns the current health status of the service.
      operationId: GetSystemHealth
      responses:
        '200':
          description: OK. Health status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ "UP","DOWN" ]
                  probes:
                    type: object
                    properties:
                      liveness:
                        type: string
                        enum: [ "HEALTHY","UNHEALTHY" ]
                        description: "Possible values: HEALTHY, UNHEALTHY."
                      readiness:
                        type: string
                        enum: [ "READY","BOOTSTRAPPING","NOT-READY" ]
                        description: "Possible values: HEALTHY, UNHEALTHY."
        '503':
          $ref: '#/components/responses/Problem503'
  /info:
    get:
      tags: [ "SYSTEM API" ]
      summary: System Information
      description: Returns the information of the system
      operationId: GetSystemInfo
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-[\da-z\-]+(\.[\da-z\-]+)*)?(\+[\da-z\-]+(\.[\da-z\-]+)*)?$
                  service_type:
                    type: string
                    enum: [ "SERVICE","HYBRID" ]
        '503':
          $ref: '#/components/responses/Problem503'
  /users:
    post:
      tags: [ "CONSUMER API" ]
      operationId: CreateUser
      summary: Creates a User
      description: Allows the registration of an User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ "OK" ]
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '409':
          description: Whenever the username or contact is not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                UsernameNotAvailable:
                  summary: Whenever the specified username is not available
                  value:
                    type: /problems/username/not-available
                    title: Username not available
                    status: 409
                    detail: The specified username is not available
                    instance: /problems/username/not-available/$traceId
                ContactNotAvailable:
                  summary: Whenever the specified contact is not available
                  value:
                    type: /problems/contact/not-available
                    title: Contact not available
                    status: 409
                    detail: The specified contact is not available
                    instance: /problems/contact/not-available/$traceId
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                MinimumAgeConstraintViolation:
                  $ref: '#/components/examples/MinimumAgeConstraintViolation'
                UnrecognizableLivesInConstraintViolation:
                  $ref: '#/components/examples/UnrecognizableLivesInConstraintViolation'
                UnsupportedMobileNumber:
                  $ref: '#/components/examples/UnsupportedMobileNumber'
                UnsupportedEmail:
                  $ref: '#/components/examples/UnsupportedEmail'
                LastNameNotSupported:
                  $ref: '#/components/examples/LastNameNotSupported'
                FirstNameNotSupported:
                  $ref: '#/components/examples/FirstNameNotSupported'
                UsernameNotSupported:
                  summary: Whenever the specified username is not supported
                  value:
                    type: /problems/constraint-violation/username/not-supported
                    title: Constraint Violation
                    status: 422
                    detail: Specified username is not supported.
                    instance: /problems/constraint-violation/username/not-supported
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /offers:
    get:
      tags: [ "CONSUMER API" ]
      operationId: ListOffers
      summary: List available offers
      description: Returns a list of available offers.
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
          description: "Number of items per page."
      responses:
        '200':
          description: OK. A paginated list of offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfOffer'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /users/self:
    get:
      tags: [ "CONSUMER API" ]
      operationId: GetCurrentUserInformation
      summary: Retrieve current user's data
      description: Returns the current user's data
      security:
        - public: [ "user:read" ]
      responses:
        '200':
          description: OK. User data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUseByIdResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    patch:
      tags: [ "CONSUMER API" ]
      operationId: UpdateCurrentUserInformation
      summary: Partially Update the current User data
      description: Updates current user data
      security:
        - public: [ "user:write" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserByIdRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ "OK" ]
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                MinimumAgeConstraintViolation:
                  $ref: '#/components/examples/MinimumAgeConstraintViolation'
                UnrecognizableLivesInConstraintViolation:
                  $ref: '#/components/examples/UnrecognizableLivesInConstraintViolation'
                LastNameNotSupported:
                  $ref: '#/components/examples/LastNameNotSupported'
                FirstNameNotSupported:
                  $ref: '#/components/examples/FirstNameNotSupported'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /users/self/contacts:
    post:
      tags: [ "CONSUMER API" ]
      operationId: AddUserContact
      summary: Create a new contact for the current user
      description: Create a new contact for the current user and awaits verification of contact.
      security:
        - public: [ "user:write" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
      responses:
        '200':
          description: OK. Returns the created contact ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: "ID of the created contact."
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '422':
          $ref: '#/components/responses/Problem422'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/contacts/{id}/verify:
    post:
      tags: [ "CONSUMER API" ]
      operationId: VerifyCurrentUserContactById
      summary: Verify one of the user's contacts
      description: Verifies a contact that has been created but not verified
      security:
        - public:
            - "user:write"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: "Verification code."
      responses:
        '204':
          description: No Content. Contact verified successfully.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          description: Contact doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                ContactDoesNotExist:
                  $ref: '#/components/examples/ContactDoesNotExist'
        '422':
          description: Specified code doesn't match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                VerificationCodeDoesNotMatch:
                  value:
                    type: /problems/constraint-violation/contact/verification/code
                    title: Constraint Violation
                    status: 422
                    detail: The specified code doesn't match the code sent to the contact.
                    instance: /problems/constraint-violation/contact/verification/code/$traceId
                    context:
                      number_of_retries: 3
                      number_of_attempts: 2
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/contacts/{id}:
    delete:
      tags: [ "CONSUMER API" ]
      operationId: DeleteContactById
      summary: Delete a specific contact from the current user
      description: Requires authentication (private)
      security:
        - public:
            - "user:write"
      parameters:
        - name: id
          in: path
          required: true
          description: "Contact ID to delete."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Contact deleted.
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          description: Contact doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                ContactDoesNotExist:
                  $ref: '#/components/examples/ContactDoesNotExist'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /tasks:
    post:
      tags: [ "CONSUMER API" ]
      operationId: CreateUserTask
      summary: Create a new task
      description: Create a task on the User board
      security:
        - public: [ "task:write", "user:write" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '200':
          description: OK. Task created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                TaskNameNotSupported:
                  $ref: '#/components/examples/TaskNameNotSupported'
                TaskDescriptionNotSupported:
                  $ref: '#/components/examples/TaskDescriptionNotSupported'
                TaskLabelNotSupported:
                  $ref: '#/components/examples/TaskLabelNotSupported'
                TaskPriorityNotSupported:
                  $ref: '#/components/examples/TaskPriorityNotSupported'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    get:
      tags: [ "CONSUMER API" ]
      operationId: GetUserTasks
      summary: List tasks for the current user
      description: Returns a page contained tasks that match criteria.
      security:
        - public: [ "task:read", "user:read" ]
      parameters:
        - name: s
          in: query
          schema:
            type: string
          description: Search filter to apply
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
          description: "Number of tasks to fetch."
        - name: priority
          in: query
          schema:
            type: integer
          description: "Example query param for priority."
        - name: sort
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK. Returns a paginated list of tasks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfListableTask'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /tasks/{id}:
    get:
      tags: [ "CONSUMER API" ]
      operationId: GetUserTaskById
      summary: Retrieve a specific task by ID
      description: Returns a specific task for the user
      security:
        - public: [ "task:read", "user:read" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Task ID."
          schema:
            type: string
      responses:
        '200':
          description: OK. Task details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: "#/components/responses/TaskNotFound"
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    patch:
      tags: [ "CONSUMER API" ]
      operationId: UpdateUserTaskById
      summary: Partially update a task
      description: Updates a task
      security:
        - public: [ "task:write", "user:write" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Task ID."
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: OK. Task updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: "#/components/responses/TaskNotFound"
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                TaskNameNotSupported:
                  $ref: '#/components/examples/TaskNameNotSupported'
                TaskDescriptionNotSupported:
                  $ref: '#/components/examples/TaskDescriptionNotSupported'
                TaskLabelNotSupported:
                  $ref: '#/components/examples/TaskLabelNotSupported'
                TaskPriorityNotSupported:
                  $ref: '#/components/examples/TaskPriorityNotSupported'
                TaskStatusNotSupported:
                  $ref: '#/components/examples/TaskStatusNotSupported'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
    delete:
      tags: [ "CONSUMER API" ]
      summary: Delete a task
      operationId: DeleteUserTaskById
      description: Deletes permanently a task
      security:
        - public: [ "task:write", "user:write" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Task ID."
          schema:
            type: string
      responses:
        '204':
          description: No Content. Task deleted.
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: "#/components/responses/TaskNotFound"
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/subscriptions:
    post:
      tags: [ "CONSUMER API" ]
      operationId: CreateUserSubscription
      summary: Create a new subscription for the current user
      description: Create a subscription for the current user if no subscription is in effect
      security:
        - public: [ "user:write", "subscription:write" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offer:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "Offer ID."
                contact:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "Contact ID."
      responses:
        '204':
          description: No Content. Subscription created.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '408':
          description: Request Timeout (e.g., payment timeout).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Whenever the user intend to subscribe to a similar offer or lower offer than the current.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                IncompatibleSubscription:
                  description: Whenever the user intend to subscribe to a similar offer or lower offer than the current.
                  value:
                    type: /problems/subscription/cannot-downgrade-subscription
                    title: Unprocessable Entity
                    status: 422
                    detail: The specified offer must have greater benefits than the current
                    instance: /problems/subscription/cannot-downgrade-subscription/$traceId
        '422':
          description: Whenever validation fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                OfferNotAvailable:
                  description: Whenever the specified offer isn't available
                  value:
                    type: /problems/subscription/offer-not-available
                    title: Unprocessable Entity
                    status: 422
                    detail: The specified offer isn't available to subscribe to
                    instance: /problems/subscription/offer-not-available/$traceId
                ContactDoesNotExist:
                  description: Whenever the specified contact does not exist
                  value:
                    type: /problems/subscription/contact-not-found
                    title: Unprocessable Entity
                    status: 422
                    detail: The specified contact does not exist or doesn't belong to the User.
                    instance: /problems/subscription/contact-not-found/$traceId
                ContactKindNotSupported:
                  description: Whenever the specified contact kind isn't MOBILE
                  value:
                    type: /problems/subscription/contact-kind-not-supported
                    title: Unprocessable Entity
                    status: 422
                    detail: The specified contact kind does not allow payments to occur
                    instance: /problems/subscription/contact-kind-not-supported/$traceId
                ContactNotVerified:
                  description: Whenever the specified contact isn't verified
                  value:
                    type: /problems/subscription/contact-not-verified
                    title: Unprocessable Entity
                    status: 422
                    detail: The specified contact isn't verified therefore cannot be used to make payment
                    instance: /problems/subscription/contact-not-verified/$traceId
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /users/self/subscriptions/latest:
    get:
      tags: [ "CONSUMER API" ]
      operationId: GetCurrentUserSubscription
      summary: Retrieve the latest subscription of the current user
      description: Returns the current subscription of the current user
      security:
        - public: [ "user:read", "subscription:read" ]
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
        '204':
          description: No Content. No subscription found.
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users:
    get:
      tags: [ "ADMINISTRATIVE API" ]
      summary: List users
      description: Returns page of Users
      security:
        - private: [ "user:read" ]
      x-security-role: [ "USER_VIEWER" ]
      operationId: GetUsers
      parameters:
        - name: s
          in: query
          schema:
            type: string
          description: "Search string."
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
          description: "Number of items to fetch."
        - name: sort
          in: query
          schema:
            type: string
          description: "Sort order."
      responses:
        '200':
          description: OK. A paginated list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfAdminAPIGetUserResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}:
    get:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Retrieve details of a specific user
      description: Returns a specific User
      security:
        - private: [ "user:read" ]
      x-security-role: [ "USER_VIEWER" ]
      operationId: GetUserInformationById
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to retrieve."
          schema:
            type: string
      responses:
        '200':
          description: OK. User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetUserByIdResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    patch:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Partially update a user
      description: Updates the specified User
      security:
        - private: [ "user:write" ]
      x-security-role: [ "USER_MANAGER" ]
      operationId: UpdateUserInformationById
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to update."
          schema:
            type: string
        - $ref: "#/components/parameters/TicketId"
        - $ref: "#/components/parameters/TicketSystem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAPIUpdateUserByIdRequest'
      responses:
        '200':
          description: OK. Returns updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetUserByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                MinimumAgeConstraintViolation:
                  $ref: '#/components/examples/MinimumAgeConstraintViolation'
                UnrecognizableLivesInConstraintViolation:
                  $ref: '#/components/examples/UnrecognizableLivesInConstraintViolation'
                LastNameNotSupported:
                  $ref: '#/components/examples/LastNameNotSupported'
                FirstNameNotSupported:
                  $ref: '#/components/examples/FirstNameNotSupported'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Delete a user
      description: Deletes the specified User
      security:
        - private: [ "user:write" ]
      x-security-role: [ "USER_MANAGER" ]
      operationId: DeleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to delete."
          schema:
            type: string
        - $ref: "#/components/parameters/TicketSystem"
        - $ref: "#/components/parameters/TicketId"
      responses:
        '204':
          description: No Content. User deleted.
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}/contacts/{key}:
    delete:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Delete a contact from a user
      description: Deletes a contact from the specified User
      security:
        - private: [ "user:write" ]
      x-security-role: [ "USER_MANAGER" ]
      operationId: DeleteUserContactByUserIdAndContactId
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID."
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Contact key to delete."
          schema:
            type: string
        - $ref: "#/components/parameters/TicketSystem"
        - $ref: "#/components/parameters/TicketId"
      responses:
        '204':
          description: No Content. Contact deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          description: Whenever User or Contact doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                UserDoesNotExist:
                  $ref: '#/components/examples/UserDoesNotExist'
                ContactDoesNotExist:
                  $ref: '#/components/examples/ContactDoesNotExist'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/subscriptions:
    post:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Create multiple subscriptions
      description: Creates subscription in bulk
      security:
        - private: [ "user:write","subscription:write" ]
      x-security-role: [ "USER_MANAGER" ]
      parameters:
        - $ref: "#/components/parameters/TicketSystem"
        - $ref: "#/components/parameters/TicketId"
      operationId: CreateSubscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: "Subscription ID."
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "User ID."
                  offer:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "Offer ID."
      responses:
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOperationResponse"
              examples:
                Sample:
                  $ref: "#/components/examples/CreateSubscriptionResponse"
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/subscriptions/{id}:
    get:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Retrieve a subscription by ID
      description: Returns the specified subscription
      security:
        - private: [ "user:read","subscription:read" ]
      x-security-role: [ "USER_VIEWER" ]
      operationId: GetUserSubscriptionById
      parameters:
        - name: id
          in: path
          required: true
          description: "Subscription ID."
          schema:
            type: string
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetSubscriptionByIdResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Expires a subscription
      description: Expires an active subscription
      security:
        - private: [ "user:write","subscription:write" ]
      x-security-role: [ "USER_MANAGER" ]
      operationId: ExpireSubscriptionById
      parameters:
        - name: id
          in: path
          required: true
          description: "Subscription ID."
          schema:
            type: string
        - $ref: "#/components/parameters/TicketId"
        - $ref: "#/components/parameters/TicketSystem"
      responses:
        '204':
          description: No Content. Subscription deleted.
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/offers:
    post:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Creates offers
      description: Create a bulk of Offers
      security:
        - private: [ "offer:write" ]
      x-security-role: [ "OFFER_MANAGER" ]
      operationId: CreateOffers
      parameters:
        - $ref: "#/components/parameters/TicketSystem"
        - $ref: "#/components/parameters/TicketId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdminAPICreateOfferRequest'
      responses:
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkOperationResponse"
              examples:
                Sample:
                  $ref: "#/components/examples/CreateOfferResponse"
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/Problem404'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/offers/{id}:
    get:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Get an offer by ID
      description: Returns the specified offer
      security:
        - private: [ "offer:read" ]
      x-security-role: [ "OFFER_VIEWER" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Offer ID."
          schema:
            type: string
      operationId: GetOfferById
      responses:
        '200':
          description: OK. Offer details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetOfferByIdResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/OfferDoesNotExist'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    patch:
      tags: [ "ADMINISTRATIVE API" ]
      summary: Partially update an offer
      description: Updates the specified offer
      security:
        - private: [ "offer:write" ]
      x-security-role: [ "OFFER_MANAGER" ]
      operationId: UpdateOfferById
      parameters:
        - name: id
          in: path
          required: true
          description: "Offer ID."
          schema:
            type: string
        - $ref: "#/components/parameters/TicketSystem"
        - $ref: "#/components/parameters/TicketId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAPIUpdateOfferByIdRequest'
      responses:
        '200':
          description: OK. Returns updated offer details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetOfferByIdResponse'
        '400':
          $ref: '#/components/responses/Problem400'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/OfferDoesNotExist'
        '422':
          description: Whenever validation fails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                MaxNumberOfTasksExceeded:
                  $ref: '#/components/examples/MaxNumberOfTasksExceeded'
                InvalidExpiryDate:
                  $ref: '#/components/examples/InvalidExpiryDate'
                UnsupportedCurrency:
                  $ref: '#/components/examples/UnsupportedCurrency'
                NegativePriceAmount:
                  $ref: '#/components/examples/NegativePriceAmount'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

    delete:
      tags: [ "ADMINISTRATIVE API" ]
      operationId: DeleteOfferById
      summary: Delete an offer
      description: Deletes an offer
      security:
        - private: [ "offer:write" ]
      x-security-role: [ "OFFER_MANAGER" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Offer ID."
          schema:
            type: string
        - $ref: "#/components/parameters/TicketId"
        - $ref: "#/components/parameters/TicketSystem"
      responses:
        '204':
          description: No Content. Offer deleted.
        '401':
          $ref: '#/components/responses/Problem401'
        '400':
          $ref: '#/components/responses/Problem400'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/OfferDoesNotExist'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'
  /admin/users/{id}/tasks:
    get:
      tags: [ "ADMINISTRATIVE API" ]
      operationId: GetUserTasksById
      summary: List tasks for a specific user
      description: Returns a page of user tasks
      security:
        - private: [ "user:read" ]
      x-security-role: [ "USER_VIEWER" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID to list tasks for."
          schema:
            type: string
        - name: s
          in: query
          schema:
            type: string
          description: "Filter by search criteria."
        - name: status
          in: query
          schema:
            type: string
          description: "Filter by status."
        - name: cursor
          in: query
          schema:
            type: string
          description: "Pagination cursor."
        - name: limit
          in: query
          schema:
            type: integer
          description: "Number of tasks to fetch."
        - name: sort
          in: query
          schema:
            type: string
          description: "Sort order."
      responses:
        '200':
          description: OK. Returns a paginated list of tasks for the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePageOfAdminAPIGetListableTaskResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

  /admin/users/{id}/tasks/{key}:
    get:
      tags: [ "ADMINISTRATIVE API" ]
      operationId: GetUserTaskByUserIdAndTaskId
      summary: Retrieve details of a specific task for a user
      description: Returns the specified task
      security:
        - private: [ "user:read", "task:read" ]
      x-security-role: [ "USER_VIEWER" ]
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID."
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Task ID or key."
          schema:
            type: string
      responses:
        '200':
          description: OK. Task details for the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAPIGetTaskByIdResponse'
        '401':
          $ref: '#/components/responses/Problem401'
        '403':
          $ref: '#/components/responses/Problem403'
        '404':
          description: Whenever User  or Task does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                UserDoesNotExist:
                  description: Whenever User does not exist
                  $ref: '#/components/examples/UserDoesNotExist'
                TaskDoesNotExist:
                  description: Whenever Task does not exist
                  $ref: '#/components/examples/TaskDoesNotExist'
        '500':
          $ref: '#/components/responses/Problem500'
        '503':
          $ref: '#/components/responses/Problem503'

